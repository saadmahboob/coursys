from django.core.management.base import BaseCommand
from django.core import serializers

from coredata.models import Unit, Person, Semester, Role
from grad.models import GradProgram, GradStudent, GradProgramHistory, Supervisor, \
    GradStatus, ProgressReport

from grad.models import CompletedRequirement, Letter, Scholarship, OtherFunding, Promise, FinancialComment, \
    GradFlagValue, ExternalDocument, GradRequirement, ScholarshipType, LetterTemplate, GradFlag


class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument('unit_slugs', nargs='+', type=str)

    def handle(self, *args, **options):
        unit_slugs = options['unit_slugs']
        units = Unit.objects.filter(slug__in=unit_slugs)
        assert len(units) == len(unit_slugs)

        objs = list(units)
        objs.extend(Semester.objects.all())
        # Even though we only care about grads in the specified units, they may be referring to things
        # in other units.
        objs.extend(Unit.objects.all())
        # We need more GradPrograms than just the ones for the given units if we're going to ever run grad_import on
        # the data generated by this serializer (see build_program_map in grad.importer.happenings.py)
        objs.extend(GradProgram.objects.all())

        for unit in units:
            gss = GradStudent.all_objects.filter(program__unit=unit).select_related('person')
            objs.extend(gss)
            objs.extend(GradProgramHistory.objects.filter(program__unit=unit))
            supervs = Supervisor.objects.filter(student__program__unit=unit).select_related('supervisor')
            objs.extend(supervs)
            objs.extend(GradStatus.objects.filter(student__program__unit=unit))
            objs.extend(ProgressReport.objects.filter(student__program__unit=unit))

            objs.extend(GradRequirement.objects.filter(program__unit=unit))
            objs.extend(ScholarshipType.objects.filter(unit=unit))
            objs.extend(LetterTemplate.objects.filter(unit=unit))
            objs.extend(GradFlag.objects.filter(unit=unit))

            objs.extend(CompletedRequirement.objects.filter(student__program__unit=unit,
                                                            requirement__program__unit=unit))
            letters = Letter.objects.filter(student__program__unit=unit)
            objs.extend(letters)
            objs.extend(Scholarship.objects.filter(student__program__unit=unit))
            objs.extend(OtherFunding.objects.filter(student__program__unit=unit))
            objs.extend(Promise.objects.filter(student__program__unit=unit))
            objs.extend(FinancialComment.objects.filter(student__program__unit=unit))
            objs.extend(ProgressReport.objects.filter(student__program__unit=unit))
            objs.extend(GradFlagValue.objects.filter(student__program__unit=unit))
            objs.extend(ExternalDocument.objects.filter(student__program__unit=unit))

            people = set(gs.person for gs in gss) \
                     | set(s.supervisor for s in supervs if s.supervisor) \
                     | set(l.from_person for l in letters if l.from_person) \
                     | set(Person.objects.filter(userid='ggbaker'))

            objs.extend(people)
            objs.extend(Role.objects.filter(person__userid='ggbaker', unit=unit))

        data = serializers.serialize("json", objs, sort_keys=True, indent=1)
        print(data)


